In the past week: 

01. Objectives for the week 
    - Dataset for top11 methods from java-large (using test set only)
    - K-Fold cross validation on handcrafted and c2v features
    - Config dotnet in server and running near-duplicate-code-detector
    - ISSTA'20 author response (NPA and K-config)
    
02. The research skills (e.g. reading/writing/presentation/coding...) worked on 

    - Fix an issue of microsoft/near-duplicate-code-detector:
      Link: https://github.com/microsoft/near-duplicate-code-detector/commit/5a89818420899d73ffadf1e3398b7a64e043f674
  
03. Papers that you worked on (writing/editing)?  Please add links to the paper 
    
    https://www.overleaf.com/project/5e61d3179efa760001de1ea8
    
04. Code you developed. Add links to the GitHub or Bitbucket repo. 
    
    https://github.com/mdrafiqulrabin/fork-near-duplicate-code-detector
    
05. Analysis that you performed. Include link to the dataset and results.  
    
    data: /scratch/rabin/pca/uhserg-pca/data
    result: /scratch/rabin/pca/uhserg-pca/result
    
06. Include the names and summaries of papers you read.  
    
     - Machine Learning Based Recommendation of Method Names: How Far Are We
     - Supervised Deep Feature Embedding With Handcrafted Feature
    
07. Did you seek help when you needed that? 
  
    - Dotnet installation and Code duplication tool running time

08. How could you increase your effectiveness by 1%. (e.g. writing scripts for some tasks, better organization, not doing some of the things that you did, etc.) 

    Following productivity tips of researchers: 
    https://www.academictransfer.com/en/blog/20-productivity-tips-for-researchers/.
    
09. Obstacles in you research and you plan to overcome them? 

    - Training/Validation/Test split instead of K-Fold
    - Deduplication to remove duplicates from dataset
    - PCA should be configured with train set only
    
10. Are you on track to be a productive researcher? 

    Yes.

Plan for the next week: 

11. Next weekâ€™s objectives (be as specific as possible)

    - Extract handcrafted features for top11~top20
    - Analysis deduplication for java-large
    - Retraining code2vec for top20 to get embedding and prediction
    - Training/Validation/Test split instead of K-Fold
    - Comparing with SVM: handcrafted vs code2vec 

12. Any skill that you want to practice?

    - near-duplicate-code-detector, SVM (Training/Validation/Test)
  
